{"ast":null,"code":"function formatDate(date) {\n  var datePart = date.match(/\\d+/g),\n      year = datePart[0],\n      month = datePart[1],\n      day = datePart[2];\n  return day + '/' + month + '/' + year;\n}\n\nexport default function checkTrueDate(birthDate) {\n  let formatedbirthDate = formatDate(birthDate);\n  let dateCheck = new Date().toLocaleDateString();\n  let d = formatedbirthDate.split(\"/\");\n  let c = dateCheck.split(\"/\");\n  let date = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);\n  let check = new Date(c[2], parseInt(c[1]) - 1, c[0]);\n\n  if (check < date) {\n    // console.log(\"A data inicial já passou\");\n    return \"A data de nascimento que você indicou é futura\";\n  } else return true;\n}","map":{"version":3,"names":["formatDate","date","datePart","match","year","month","day","checkTrueDate","birthDate","formatedbirthDate","dateCheck","Date","toLocaleDateString","d","split","c","d1","parseInt","check"],"sources":["/home/prissz/teste-at-group/client/src/utils/checkTrueDate.js"],"sourcesContent":["function formatDate (date) {\n  var datePart = date.match(/\\d+/g),\n  year = datePart[0],\n  month = datePart[1], day = datePart[2];\n  return day+'/'+month+'/'+year;\n}\n\nexport default function checkTrueDate(birthDate) {\n  let formatedbirthDate = formatDate(birthDate)\n  let dateCheck = new Date().toLocaleDateString();\n  let d = formatedbirthDate.split(\"/\");\n  let c = dateCheck.split(\"/\");\n\n  let date = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);\n  let check = new Date(c[2], parseInt(c[1]) - 1, c[0]);\n\n  if (check < date) {\n    // console.log(\"A data inicial já passou\");\n    return \"A data de nascimento que você indicou é futura\";\n  }\n  else return true;\n}"],"mappings":"AAAA,SAASA,UAAT,CAAqBC,IAArB,EAA2B;EACzB,IAAIC,QAAQ,GAAGD,IAAI,CAACE,KAAL,CAAW,MAAX,CAAf;EAAA,IACAC,IAAI,GAAGF,QAAQ,CAAC,CAAD,CADf;EAAA,IAEAG,KAAK,GAAGH,QAAQ,CAAC,CAAD,CAFhB;EAAA,IAEqBI,GAAG,GAAGJ,QAAQ,CAAC,CAAD,CAFnC;EAGA,OAAOI,GAAG,GAAC,GAAJ,GAAQD,KAAR,GAAc,GAAd,GAAkBD,IAAzB;AACD;;AAED,eAAe,SAASG,aAAT,CAAuBC,SAAvB,EAAkC;EAC/C,IAAIC,iBAAiB,GAAGT,UAAU,CAACQ,SAAD,CAAlC;EACA,IAAIE,SAAS,GAAG,IAAIC,IAAJ,GAAWC,kBAAX,EAAhB;EACA,IAAIC,CAAC,GAAGJ,iBAAiB,CAACK,KAAlB,CAAwB,GAAxB,CAAR;EACA,IAAIC,CAAC,GAAGL,SAAS,CAACI,KAAV,CAAgB,GAAhB,CAAR;EAEA,IAAIb,IAAI,GAAG,IAAIU,IAAJ,CAASK,EAAE,CAAC,CAAD,CAAX,EAAgBC,QAAQ,CAACD,EAAE,CAAC,CAAD,CAAH,CAAR,GAAkB,CAAlC,EAAqCA,EAAE,CAAC,CAAD,CAAvC,CAAX;EACA,IAAIE,KAAK,GAAG,IAAIP,IAAJ,CAASI,CAAC,CAAC,CAAD,CAAV,EAAeE,QAAQ,CAACF,CAAC,CAAC,CAAD,CAAF,CAAR,GAAiB,CAAhC,EAAmCA,CAAC,CAAC,CAAD,CAApC,CAAZ;;EAEA,IAAIG,KAAK,GAAGjB,IAAZ,EAAkB;IAChB;IACA,OAAO,gDAAP;EACD,CAHD,MAIK,OAAO,IAAP;AACN"},"metadata":{},"sourceType":"module"}