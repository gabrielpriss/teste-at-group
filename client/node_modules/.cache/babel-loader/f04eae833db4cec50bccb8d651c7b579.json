{"ast":null,"code":"function formatDate(date) {\n  var datePart = date.match(/\\d+/g),\n      year = datePart[0],\n      month = datePart[1],\n      day = datePart[2];\n  return day + '/' + month + '/' + year;\n}\n\nexport default function checkTrueDate(dateStart, dateEnd) {\n  let formatedDateStart = formatDate(dateStart);\n  let formatedDateEnd = formatDate(dateEnd);\n  let dateCheck = new Date().toLocaleDateString();\n  let d1 = formatedDateStart.split(\"/\");\n  let d2 = formatedDateEnd.split(\"/\");\n  let c = dateCheck.split(\"/\");\n  let start = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);\n  let end = new Date(d2[2], parseInt(d2[1]) - 1, d2[0]);\n  let check = new Date(c[2], parseInt(c[1]) - 1, c[0]);\n\n  if (check > start) {\n    // console.log(\"A data inicial j치 passou\");\n    return \"A data inicial j치 passou\";\n  }\n\n  if (end < start) {// return \"A data inicial deve ser antes da data final\";\n  } else return true;\n}","map":{"version":3,"names":["formatDate","date","datePart","match","year","month","day","checkTrueDate","dateStart","dateEnd","formatedDateStart","formatedDateEnd","dateCheck","Date","toLocaleDateString","d1","split","d2","c","start","parseInt","end","check"],"sources":["/home/prissz/teste-at-group/client/src/utils/checkTrueDate.js"],"sourcesContent":["function formatDate (date) {\n  var datePart = date.match(/\\d+/g),\n  year = datePart[0],\n  month = datePart[1], day = datePart[2];\n  return day+'/'+month+'/'+year;\n}\n\nexport default function checkTrueDate(dateStart, dateEnd) {\n  let formatedDateStart = formatDate(dateStart)\n  let formatedDateEnd = formatDate(dateEnd)\n  let dateCheck = new Date().toLocaleDateString();\n  let d1 = formatedDateStart.split(\"/\");\n  let d2 = formatedDateEnd.split(\"/\");\n  let c = dateCheck.split(\"/\");\n\n  let start = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);\n  let end = new Date(d2[2], parseInt(d2[1]) - 1, d2[0]);\n  let check = new Date(c[2], parseInt(c[1]) - 1, c[0]);\n\n  if (check > start) {\n    // console.log(\"A data inicial j치 passou\");\n    return \"A data inicial j치 passou\";\n  }\n  if (end < start) {\n    // return \"A data inicial deve ser antes da data final\";\n  } else return true;\n}"],"mappings":"AAAA,SAASA,UAAT,CAAqBC,IAArB,EAA2B;EACzB,IAAIC,QAAQ,GAAGD,IAAI,CAACE,KAAL,CAAW,MAAX,CAAf;EAAA,IACAC,IAAI,GAAGF,QAAQ,CAAC,CAAD,CADf;EAAA,IAEAG,KAAK,GAAGH,QAAQ,CAAC,CAAD,CAFhB;EAAA,IAEqBI,GAAG,GAAGJ,QAAQ,CAAC,CAAD,CAFnC;EAGA,OAAOI,GAAG,GAAC,GAAJ,GAAQD,KAAR,GAAc,GAAd,GAAkBD,IAAzB;AACD;;AAED,eAAe,SAASG,aAAT,CAAuBC,SAAvB,EAAkCC,OAAlC,EAA2C;EACxD,IAAIC,iBAAiB,GAAGV,UAAU,CAACQ,SAAD,CAAlC;EACA,IAAIG,eAAe,GAAGX,UAAU,CAACS,OAAD,CAAhC;EACA,IAAIG,SAAS,GAAG,IAAIC,IAAJ,GAAWC,kBAAX,EAAhB;EACA,IAAIC,EAAE,GAAGL,iBAAiB,CAACM,KAAlB,CAAwB,GAAxB,CAAT;EACA,IAAIC,EAAE,GAAGN,eAAe,CAACK,KAAhB,CAAsB,GAAtB,CAAT;EACA,IAAIE,CAAC,GAAGN,SAAS,CAACI,KAAV,CAAgB,GAAhB,CAAR;EAEA,IAAIG,KAAK,GAAG,IAAIN,IAAJ,CAASE,EAAE,CAAC,CAAD,CAAX,EAAgBK,QAAQ,CAACL,EAAE,CAAC,CAAD,CAAH,CAAR,GAAkB,CAAlC,EAAqCA,EAAE,CAAC,CAAD,CAAvC,CAAZ;EACA,IAAIM,GAAG,GAAG,IAAIR,IAAJ,CAASI,EAAE,CAAC,CAAD,CAAX,EAAgBG,QAAQ,CAACH,EAAE,CAAC,CAAD,CAAH,CAAR,GAAkB,CAAlC,EAAqCA,EAAE,CAAC,CAAD,CAAvC,CAAV;EACA,IAAIK,KAAK,GAAG,IAAIT,IAAJ,CAASK,CAAC,CAAC,CAAD,CAAV,EAAeE,QAAQ,CAACF,CAAC,CAAC,CAAD,CAAF,CAAR,GAAiB,CAAhC,EAAmCA,CAAC,CAAC,CAAD,CAApC,CAAZ;;EAEA,IAAII,KAAK,GAAGH,KAAZ,EAAmB;IACjB;IACA,OAAO,0BAAP;EACD;;EACD,IAAIE,GAAG,GAAGF,KAAV,EAAiB,CACf;EACD,CAFD,MAEO,OAAO,IAAP;AACR"},"metadata":{},"sourceType":"module"}